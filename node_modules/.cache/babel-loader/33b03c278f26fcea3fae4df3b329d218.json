{"ast":null,"code":"var _jsxFileName = \"/home/daw/GitHub/DAW-DIW/UD05/REACT/pokedex/src/componentes/Carta.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nexport default class Carta extends Component {\n  constructor(props) {\n    super(props);\n\n    this.cargarDescripcion = async url => {\n      const res = await axios.get(url);\n      const descripcion = res.data.flavor_text_entries.filter(entrada => entrada.language.name === 'es');\n      this.setState({\n        descripcion: descripcion[0].flavor_text\n      });\n    };\n\n    this.cargarTipos = async url => {\n      const res = await axios.get(url);\n      const tipo = res.data.names.filter(type => type.language.name === 'es');\n      this.setState({\n        tipos: this.state.tipos.concat(tipo[0].name)\n      });\n    };\n\n    this.cargarHabilidades = async url => {\n      const res = await axios.get(url);\n      const habilidad = res.data.names.filter(item => item.language.name === 'es');\n      const descripcion = res.data.flavor_text_entries.filter(item => item.language.name === 'es');\n      this.setState({\n        habilidades: this.state.habilidades.concat(habilidad[0].name),\n        descripcionHabilidades: this.state.descripcionHabilidades.concat(descripcion[0].flavor_text)\n      });\n    };\n\n    this.cargarEstadisticas = async (url, puntos) => {\n      const res = await axios.get(url);\n      const estadisticas = res.data.names.filter(item => item.language.name === 'es');\n      let estadistica = {\n        \"name\": estadisticas[0].name,\n        \"point\": puntos\n      };\n      this.setState({\n        estadisticas: this.state.estadisticas.concat(estadistica)\n      });\n    };\n\n    this.closeCard = () => {\n      let contenedor = document.getElementById('CartaFlotante');\n      ReactDOM.unmountComponentAtNode(contenedor);\n    };\n\n    this.mostrarHabilidades = (item, descripcion) => {\n      return React.createElement(\"div\", {\n        className: \"divHabilidades\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, item), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, descripcion));\n    };\n\n    this.mostrarEstadisticas = (name, points) => {\n      return React.createElement(\"div\", {\n        className: \"divEstadisticas\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, name), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, points));\n    };\n\n    this.state = {\n      descripcion: null,\n      pokemon: this.props.pokemon,\n      tipos: [],\n      habilidades: [],\n      descripcionHabilidades: [],\n      estadisticas: []\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      pokemon\n    } = this.state;\n    await this.cargarDescripcion(pokemon.species.url);\n    await pokemon.types.forEach(tipo => {\n      this.cargarTipos(tipo.type.url);\n    });\n    await pokemon.abilities.forEach(item => {\n      this.cargarHabilidades(item.ability.url);\n    });\n    await pokemon.stats.forEach(item => {\n      this.cargarEstadisticas(item.stat.url, item.base_stat);\n    });\n  } //Carga de forma asincrona al estado descripcion la traducción al español de la descripcion del pokemon\n\n\n  render() {\n    const {\n      descripcion,\n      pokemon,\n      tipos,\n      habilidades,\n      descripcionHabilidades,\n      estadisticas\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"carta\",\n      key: pokemon.name + \"_poke\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"cerrarMapa\",\n      onClick: () => this.closeCard(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"X\"), React.createElement(\"div\", {\n      className: \"cartaHead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"namePokemon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, pokemon.name), React.createElement(\"div\", {\n      className: \"number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, 'Nº ' + pokemon.id))), React.createElement(\"div\", {\n      className: \"cartaBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: pokemon.sprites.front_default,\n      alt: pokemon.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"descripcion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, descripcion))), React.createElement(\"div\", {\n      className: \"contentHT\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Habilidades\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Habilidades\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, habilidades.map((item, index) => React.createElement(\"div\", {\n      key: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, this.mostrarHabilidades(item, descripcionHabilidades[index]))))), React.createElement(\"div\", {\n      className: \"tipo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Tipo\"), tipos.map(tipo => React.createElement(\"div\", {\n      key: tipo + '_',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, tipo)))), React.createElement(\"div\", {\n      className: \"cartaFoot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"puntos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Estadisticas\"), React.createElement(\"div\", {\n      className: \"divPuntos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, estadisticas.map(tipo => React.createElement(\"div\", {\n      style: {\n        border: 'solid black 0.5px'\n      },\n      key: tipo.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.mostrarEstadisticas(tipo.name, tipo.point)))))));\n  }\n\n}","map":{"version":3,"sources":["/home/daw/GitHub/DAW-DIW/UD05/REACT/pokedex/src/componentes/Carta.js"],"names":["React","Component","ReactDOM","axios","Carta","constructor","props","cargarDescripcion","url","res","get","descripcion","data","flavor_text_entries","filter","entrada","language","name","setState","flavor_text","cargarTipos","tipo","names","type","tipos","state","concat","cargarHabilidades","habilidad","item","habilidades","descripcionHabilidades","cargarEstadisticas","puntos","estadisticas","estadistica","closeCard","contenedor","document","getElementById","unmountComponentAtNode","mostrarHabilidades","mostrarEstadisticas","points","pokemon","componentDidMount","species","types","forEach","abilities","ability","stats","stat","base_stat","render","id","sprites","front_default","map","index","border","point"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nexport default class Carta extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            descripcion: null,\n            pokemon: this.props.pokemon,\n            tipos: [],\n            habilidades: [],\n            descripcionHabilidades: [],\n            estadisticas: []\n        };\n    }\n\n    async componentDidMount() {\n\n        const { pokemon } = this.state;\n\n        await this.cargarDescripcion(pokemon.species.url);\n        await pokemon.types.forEach(tipo => {\n            this.cargarTipos(tipo.type.url)\n        });\n\n        await pokemon.abilities.forEach(item => {\n            this.cargarHabilidades(item.ability.url);\n        })\n\n        await pokemon.stats.forEach(item => {\n            this.cargarEstadisticas(item.stat.url, item.base_stat);\n        })\n\n    }\n\n    //Carga de forma asincrona al estado descripcion la traducción al español de la descripcion del pokemon\n    cargarDescripcion = async (url) => {\n\n        const res = await axios.get(url);\n        const descripcion = res.data.flavor_text_entries.filter(entrada => entrada.language.name === 'es')\n        this.setState({\n            descripcion: descripcion[0].flavor_text,\n        });\n    }\n\n    //Carga de forma asincrona al estado tipos la traducción al español del tipo de pokemon\n    cargarTipos = async (url) => {\n\n        const res = await axios.get(url);\n        const tipo = res.data.names.filter(type => type.language.name === 'es')\n\n        this.setState({\n            tipos: this.state.tipos.concat(tipo[0].name)\n\n        });\n    }\n\n    //Carga de forma asincrona al estado habilidades y descricionHabilidades la traducción al español de las habilidades del pokemon\n    cargarHabilidades = async (url) => {\n\n        const res = await axios.get(url);\n        const habilidad = res.data.names.filter(item => item.language.name === 'es')\n        const descripcion = res.data.flavor_text_entries.filter(item => item.language.name === 'es')\n\n        this.setState({\n            habilidades: this.state.habilidades.concat(habilidad[0].name),\n            descripcionHabilidades: this.state.descripcionHabilidades.concat(descripcion[0].flavor_text)\n        });\n    }\n\n    cargarEstadisticas = async (url, puntos) => {\n\n        const res = await axios.get(url);\n        const estadisticas = res.data.names.filter(item => item.language.name === 'es')\n        let estadistica = {\n            \"name\": estadisticas[0].name,\n            \"point\": puntos\n        };\n\n        this.setState({\n            estadisticas: this.state.estadisticas.concat(estadistica),\n        });\n    }\n\n    //Cuando es llamado desmonta el contenedor de la Carta\n    closeCard = () => {\n\n        let contenedor = document.getElementById('CartaFlotante');\n        ReactDOM.unmountComponentAtNode(contenedor);\n    }\n\n    //Crear los div de habilidades con los datos pasados como parámetro\n    mostrarHabilidades = (item, descripcion) => {\n\n        return (\n            <div className='divHabilidades'>\n                <div>{item}</div>\n                <div>{descripcion}</div>\n            </div>\n        )\n    }\n\n    //Crear los div de estadisticas con los datos pasados como parámetro\n    mostrarEstadisticas = (name, points) => {\n        return (\n            <div className='divEstadisticas'>\n                <div>{name}</div>\n                <div>{points}</div>\n            </div>\n        )\n    }\n\n    render() {\n\n        const { descripcion, pokemon, tipos, habilidades, descripcionHabilidades, estadisticas } = this.state\n        return (\n\n            <div className='carta' key={pokemon.name + \"_poke\"} >\n                <button className='cerrarMapa' onClick={() => this.closeCard()} >X</button>\n\n                <div className='cartaHead'>\n                    <div>\n                        <div className='namePokemon'>{pokemon.name}</div>\n                        <div className='number'>{ 'Nº '+pokemon.id}</div>\n                    </div>\n                </div>\n\n                <div className='cartaBody'>\n                    <img src={pokemon.sprites.front_default} alt={pokemon.name} />\n                    <div>\n                        <div className='descripcion'>{descripcion}</div>\n                    </div>\n                </div>\n\n                <div className='contentHT'>\n\n                    <div className='Habilidades'>\n                        <h3>Habilidades</h3>\n                        <div>\n                            {\n                                habilidades.map((item, index) =>\n                                    <div key={item}>{this.mostrarHabilidades(item, descripcionHabilidades[index])}</div>\n                                )\n                            }\n                        </div>\n                    </div>\n                    <div className='tipo'>\n                            <h3>Tipo</h3>\n                            {\n                                tipos.map(tipo => <div key={tipo + '_'} >{tipo}</div>)\n                            }\n                        </div>\n                </div>\n\n\n                <div className='cartaFoot'>\n                    <div className='puntos'>\n                        <h3>Estadisticas</h3>\n                        <div className='divPuntos'>\n                            {\n                                estadisticas.map(tipo =>\n                                    <div style={{border: 'solid black 0.5px'}} key={tipo.name}>{this.mostrarEstadisticas(tipo.name, tipo.point)}</div>\n                                )\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}